@page "/company/{ticker}"
@attribute [Authorize]
@inject ICompanyService CompanyService;
@inject NavigationManager NavigationManager


@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Layouts;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Buttons;
@using System.Diagnostics

<SfDashboardLayout CellAspectRatio="3" Columns="2">
    <DashboardLayoutPanels>
        <DashboardLayoutPanel SizeY="2">
                <ContentTemplate>
                <div style="padding: 10px; margin: 10px">
                    <p style="text-align:center; font-size:150%">Description:</p>
                    <p>@Company.Description</p>
                    
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel SizeY="2">
                <ContentTemplate>
                <div style="padding: 10px; margin: 10px">
                    <p style="text-align:center; font-size:200%">Company: <b>@Company.Name</b></p>
                    <text style="font-size:120%">
                        Ticker: <b>@Company.Ticker</b> <br/>
                        Active: <b>@Company.Active</b> <br /> 
                        Homepage:<b>@Company.Homepage_url</b> <br /> 
                        Phone number: <b>@Company.Phone_Number</b> <br /> 
                        Locale: <b>@Company.Locale</b> <br /> 
                        Currency: <b>@Company.Currency_Name</b> </text>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel SizeX="2" SizeY="3">
            <ContentTemplate>
                @if (DataSource == null)
                {
                    <div class="stockchartloader">
                    </div>
                }
                else
                {
                    <div class="@loadClass">
                    </div>
                    <div class="@loadDiv">
                        <SfStockChart Title="@Ticker">
                            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>
                            <StockChartPrimaryXAxis>
                                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                            </StockChartPrimaryXAxis>
                            <StockChartPrimaryYAxis>
                                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                            </StockChartPrimaryYAxis>
                            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>
                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
                            <StockChartSeriesCollection>
                                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.HiloOpenClose" XName="x"></StockChartSeries>
                            </StockChartSeriesCollection>
                            <StockChartChartArea>
                                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                            </StockChartChartArea>
                        </SfStockChart>

                         @*<SfStockChart Title="@Company.Name">
                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>

                            @*<StockChartPeriods>
                                <StockChartPeriod IntervalType="RangeIntervalType.Days" Interval="1" Text="1D"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Weeks" Interval="1" Text="1W" Selected="true"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Months" Interval="1" Text="1M"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Months" Interval="3" Text="3M"></StockChartPeriod>
                            </StockChartPeriods>*@
@*
                            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>

                            <StockChartPrimaryXAxis>
                                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                            </StockChartPrimaryXAxis>

                            <StockChartPrimaryYAxis>
                                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                            </StockChartPrimaryYAxis>

                            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>

                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>

                            <StockChartSeriesCollection>
                                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.HiloOpenClose" XName="date"></StockChartSeries>
                            </StockChartSeriesCollection>

                            <StockChartChartArea>
                                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                            </StockChartChartArea>

                        </SfStockChart>*@
                    </div>
                    <style>
                        .stockchartloader {
                            border: 6px solid #f3f3f3;
                            border-top: 6px solid #7a0fff;
                            width: 40px;
                            height: 40px;
                            position: absolute;
                            top: 46%;
                            left: 46%;
                            border-radius: 50%;
                            -webkit-animation: loader 2s linear infinite;
                            animation: loader 2s linear infinite;
                        }
                        .stockchartdiv {
                            visibility: hidden;
                        }
                    </style>
                }
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel SizeX="1" SizeY="2">
            <ContentTemplate>
                 <div style="padding: 10px; margin: 10px">
                <p style="text-align:center; font-size:200%"><b>Most recent values: </b></p>
                <text style="font-size:120%">
                    @*From date: <b>@DailyOpenClose.T</b> 
                    Open: <b>@DailyOpenClose.Open</b>
                    Close: <b>@DailyOpenClose.Close</b>
                    High: <b>@DailyOpenClose.High</b>
                    Low: <b>@DailyOpenClose.Low</b>
                    Volume: <b>@DailyOpenClose.Volume</b>*@
                </text>
            </div>
             </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel>
            <ContentTemplate>
                <div style="padding: 10px; margin: 10px">
                    <SfButton Content="Add to watchlist" >

                    </SfButton>
                    <SfButton Content="Show watchlist" @onclick="NavigateToWatchlist">

                    </SfButton>
                    <SfButton Content="Search" @onclick="NavigateToSearch">
                    </SfButton>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
    </DashboardLayoutPanels>
</SfDashboardLayout>



@code {

    [Parameter]
    public string Ticker { get; set; }

    public projektApbd.Shared.Models.DTOs.Company Company { get; set; } = new projektApbd.Shared.Models.DTOs.Company();
    public projektApbd.Shared.Models.DTOs.DailyOpenClose DailyOpenClose { get; set; } = new projektApbd.Shared.Models.DTOs.DailyOpenClose();
    public List<projektApbd.Shared.Models.DTOs.DailyOpenClose> DailyOpenCloses { get; set; } = new List<projektApbd.Shared.Models.DTOs.DailyOpenClose>();

    public string Error { get; set; }

    protected override void OnParametersSet()
    {
        var test = Ticker;
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeCompany();
        await InitializeStockChart();
    }

    private async Task InitializeCompany()
    {
        try
        {
            Company = await CompanyService.PostCompany(Ticker);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }

    private async Task InitializeStockChart()
    {
        try
        {
            await CompanyService.PostDailyOpenCloses(Ticker, DateTime.Now.AddDays(-14), DateTime.Now);
            DailyOpenCloses = await CompanyService.GetDailyOpenCloses(Company.Id, DateTime.Now.AddDays(-14), DateTime.Now);
            ChartData[] output = new ChartData[DailyOpenCloses.Count];
            int i = 0;

            foreach(var day in DailyOpenCloses)
            {
                output[i] = new ChartData
                    {
                        x =  day.Date,
                        open = decimal.ToDouble(day.Open),
                        low = decimal.ToDouble(day.Low),
                        close = decimal.ToDouble(day.Close),
                        high = decimal.ToDouble(day.High),
                        volume = double.Parse(day.Volume)
                    };
            }

            Console.WriteLine(DailyOpenCloses);
            DataSource = output;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Trace.TraceError(Error);
            StateHasChanged();
        }
    }

    private void NavigateToWatchlist()
    {
        NavigationManager.NavigateTo("/watchlist");
    }

    private void NavigateToSearch()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AddToWatchList()
    {

    }

    private ChartData[]? DataSource { get; set; }
    //private ChartData[]? DataSource { get; set; } = new ChartData[]
    //{
    //    new ChartData
    //    {
    //        x = DateTime.Now,
    //        open = 1.4,
    //        close = 1.5,
    //        high = 1.5,
    //        low = 1.3,
    //        volume = 1.4,
    //    }
    //};

    public class ChartData
    {
        public DateTime x { get; set; }
        public double open { get; set; }
        public double low { get; set; }
        public double close { get; set; }
        public double high { get; set; }
        public double volume { get; set; }
    }
    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";

    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }
}