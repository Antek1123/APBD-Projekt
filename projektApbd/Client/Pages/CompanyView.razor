@page "/company/{ticker}"
@attribute [Authorize]
@inject ICompanyService CompanyService;

@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Layouts;
@using Syncfusion.Blazor.Charts;

<SfDashboardLayout CellAspectRatio="3" Columns="2">
    <DashboardLayoutPanels>
        <DashboardLayoutPanel SizeY="2">
                <ContentTemplate>
                <div style="padding: 10px; margin: 10px">
                    <p style="text-align:center; font-size:150%">Description:</p>
                    <p>@Company.Description</p>
                    
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>

        <DashboardLayoutPanel SizeY="2">
                <ContentTemplate>
                <div style="padding: 10px; margin: 10px">
                    <p style="text-align:center; font-size:200%">Company: <b>@Company.Name</b></p>
                    <text style="font-size:120%">
                        Ticker: <b>@Company.Ticker</b> <br/>
                        Active: <b>@Company.Active</b> <br /> 
                        Homepage:<b>@Company.Homepage_url</b> <br /> 
                        Phone number: <b>@Company.Phone_Number</b> <br /> 
                        Locale: <b>@Company.Locale</b> <br /> 
                        Currency: <b>@Company.Currency_Name</b> </text>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel SizeX="2" SizeY="3">
            <ContentTemplate>
                <SfStockChart Title=@Company.Name>
                    <StockChartSeriesCollection>
                        @*<StockChartSeries DataSource="@StockDetails" Type="ChartSeriesType.HiloOpenClose" XName="Date" High="High" Low="Low">*@

                        @*</StockChartSeries>*@
                    </StockChartSeriesCollection>
                </SfStockChart>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel SizeX="1" SizeY="2">
             <ContentTemplate>
                 <div style="padding: 10px; margin: 10px">
                <p style="text-align:center; font-size:200%"><b>Most recent values: </b></p>
                <text style="font-size:120%">
                    From date: <b></b> 
                </text>
            </div>
             </ContentTemplate>
        </DashboardLayoutPanel>
    </DashboardLayoutPanels>
</SfDashboardLayout>

@*<SfStockChart Title=@Company.Name>
                    <StockChartSeriesCollection>
                        <StockChartSeries DataSource="@StockDetails" Type="ChartSeriesType.Candle" XName="Date" High="High" Low="Low" Open="Open" Close="Close" Volume="Volume">

                        </StockChartSeries>
                    </StockChartSeriesCollection>
                </SfStockChart>*@


@code {

    [Parameter]
    public string Ticker { get; set; }

    public projektApbd.Shared.Models.DTOs.Company Company { get; set; } = new projektApbd.Shared.Models.DTOs.Company();
    public projektApbd.Shared.Models.DTOs.DailyOpenClose DailyOpenClose { get; set; } = new projektApbd.Shared.Models.DTOs.DailyOpenClose();
    public List<projektApbd.Shared.Models.DTOs.DailyOpenClose> DailyOpenCloses { get; set; } = new List<projektApbd.Shared.Models.DTOs.DailyOpenClose>();

    public string Error { get; set; }

    protected override void OnParametersSet()
    {
        var test = Ticker;
    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeCompany();
        await InitializeStockChart();
        DailyOpenClose = DailyOpenCloses.Last();
    }

    private async Task InitializeCompany()
    {
        try
        {
            Company = await CompanyService.PostCompany(Ticker);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }

    private async Task InitializeStockChart()
    {
        try
        {
            DailyOpenCloses = await CompanyService.PostDailyOpenCloses(Ticker, DateTime.Now.AddDays(-14), DateTime.Now);
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }

    public class StockChartData
    {
        public DateTime Date;
        public Double Open;
        public Double Low;
        public Double Close;
        public Double High;
        public Double Volume;
    }

    public List<StockChartData> StockDetails = new List<StockChartData>
    {
         new StockChartData { Date = new DateTime(2012, 04, 02), Open = 85.9757, High = 90.6657, Low = 85.7685, Close = 90.5257, Volume = 660187068},
         new StockChartData { Date = new DateTime(2012, 04, 09), Open = 89.4471, High = 92, Low = 86.2157, Close = 86.4614, Volume = 912634864},
         new StockChartData { Date = new DateTime(2012, 04, 16), Open = 87.1514, High = 88.6071, Low = 81.4885, Close = 81.8543, Volume = 1221746066},
         new StockChartData { Date = new DateTime(2012, 04, 23), Open = 81.5157, High = 88.2857, Low = 79.2857, Close = 86.1428, Volume = 965935749},
         new StockChartData { Date = new DateTime(2012, 04, 30), Open = 85.4, High =  85.4857, Low = 80.7385, Close = 80.75, Volume = 615249365},
         new StockChartData { Date = new DateTime(2012, 05, 07), Open = 80.2143, High = 82.2685, Low = 79.8185, Close = 80.9585, Volume = 541742692},
         new StockChartData { Date = new DateTime(2012, 05, 14), Open = 80.3671, High = 81.0728, Low = 74.5971, Close = 75.7685, Volume = 708126233},
         new StockChartData { Date = new DateTime(2012, 05, 21), Open = 76.3571, High = 82.3571, Low = 76.2928, Close = 80.3271, Volume = 682076215},
         new StockChartData { Date = new DateTime(2012, 05, 28), Open = 81.5571, High = 83.0714, Low = 80.0743, Close = 80.1414, Volume = 480059584},
     };
}
