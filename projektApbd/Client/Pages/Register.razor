@page "/register"
@using projektApbd.Shared.Models.DTOs
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager;
@inject IAuthenticationService AuthenticationService;


<PageTitle>Register</PageTitle>

<div class="col-md-6 offset-md-3 mt-5">
    <div class="card">
        <h4 class="card-header">Register</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="model.Email" type="email" class="form-control" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <br>
                <button class="btn btn-primary">
                    @if (loading) {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Register
                </button>
                @if (!string.IsNullOrEmpty(error)) {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
             <button class="btn btn-primary" style="margin-top: 10px" @onclick="@NavigateToLogin">
                    Back to login
             </button>
        </div>
    </div>
</div>


@code {
    private projektApbd.Shared.Models.DTOs.User model = new projektApbd.Shared.Models.DTOs.User();
    private bool loading;
    private string error;

    protected override void OnInitialized()
    {
        if (AuthenticationService.UserResponse != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.Register(model);

            await AuthenticationService.Login(new UserLoginRequest
                {
                   Username = model.Username,
                   Password = model.Password
                });
            var query = new Uri(NavigationManager.Uri).Query;
            var queryStrings = QueryHelpers.ParseQuery(query);
            if (queryStrings.TryGetValue("returnUrl", out var returnUrl))
            {
                NavigationManager.NavigateTo(returnUrl);
            }
            NavigationManager.NavigateTo("/index");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
